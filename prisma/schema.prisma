datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model department {
  id         Int     @id @default(autoincrement())
  name       String
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users user[]
}

model user {
  id               Int     @id @default(autoincrement())
  firstName        String
  secondName       String
  fatherLastName   String
  motherLastName   String
  email            String
  isAvailable      Boolean @default(true)
  upbCode          Int
  is_deleted       Boolean @default(false)
  is_confirmed     Boolean @default(false)
  phone            String
  hashed_password  String  @default("TickTrackNewUser")
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  role_id      Int
  role         role        @relation(fields: [role_id], references: [id])
  department_id Int
  department   department  @relation(fields: [department_id], references: [id])

  student        student?
  administrative administrative?

  user_state_history user_state_history[]
}

model role {
  id         Int     @id @default(autoincrement())
  name       String
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users             user[]
  role_permission   role_permission[]
}

model permission {
  id         Int     @id @default(autoincrement())
  name       String
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role_permission role_permission[]
}

model role_permission {
  role_id       Int
  permission_id Int
  is_deleted    Boolean @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  role       role       @relation(fields: [role_id], references: [id])
  permission permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
}

model student {
  id         Int     @id
  user       user    @relation(fields: [id], references: [id])
  semester   Int     @default(0)
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  commitment   commitment[]
}

model administrative {
  id         Int     @id
  user       user    @relation(fields: [id], references: [id])
  upb_role   String
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  work work[]
  transactions_authored   transaction[] @relation("AuthorTransactions")
  user_state_histories user_state_history[]
  work_histories work_history[]
}

model commitment {
  id                 Int     @id @default(autoincrement())
  service_details_id Int
  student_id         Int
  is_current         Boolean
  is_deleted         Boolean @default(false)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  service_details service_details @relation(fields: [service_details_id], references: [id])
  student         student         @relation(fields: [student_id], references: [id])
  inscriptions    inscription[]
}

model service_details {
  id                 Int     @id @default(autoincrement())
  scholarship_id     Int
  scholarship        scholarship @relation(fields: [scholarship_id], references: [id])
  percentage         Float
  hours_per_semester Int
  total_hours        Int
  is_deleted         Boolean @default(false)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  commitment commitment[]
}

model scholarship {
  id              Int     @id @default(autoincrement())
  name            String
  description     String
  is_deleted      Boolean @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  service_details service_details[]
}

model semester {
  id           Int     @id @default(autoincrement())
  start_date   String
  end_date     String
  is_deleted   Boolean @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  number       Int
  year         Int
  inscription  inscription[]
  work         work[]
}

model inscription {
  id             Int     @id @default(autoincrement())
  commitment_id  Int
  semester_id    Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  is_deleted     Boolean @default(false)
  is_complete    Boolean @default(false)
  transactions   transaction[]
  semester       semester   @relation(fields: [semester_id], references: [id])
  commitment     commitment   @relation(fields: [commitment_id], references: [id]) 
}

model work {
  id                  Int     @id @default(autoincrement())
  title               String
  description         String
  date_begin          String
  date_end            String
  administrative_id   Int
  semester_id         Int
  is_open             Boolean @default(true)
  is_deleted          Boolean @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  administrative      administrative @relation(fields: [administrative_id], references: [id])
  semester            semester       @relation(fields: [semester_id], references: [id])
  work_history        work_history[]
  transaction         transaction[]
}

model work_history {
  id         Int     @id @default(autoincrement())
  work_id    Int
  administrative_id Int
  status     String
  date       DateTime
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  work       work     @relation(fields: [work_id], references: [id])
  administrative administrative @relation(fields: [administrative_id], references: [id])
}

model transaction {
  id                     Int     @id @default(autoincrement())
  work_id                Int
  inscription_id          Int
  date                   String
  hours                  Int
  comment_student        String?
  comment_administrative String?
  is_deleted             Boolean @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  qualification_id       Int
  author_id              Int

  author          administrative     @relation("AuthorTransactions", fields: [author_id], references: [id])
  qualification   qualification      @relation(fields: [qualification_id], references: [id])
  work            work               @relation(fields: [work_id], references: [id])
  inscription     inscription         @relation(fields: [inscription_id], references: [id])
}

model qualification {
  id                     Int     @id @default(autoincrement())
  name                   String
  value                  Int
  is_deleted   Boolean @default(false)
  transactions           transaction[]
}

model user_state_history {
  id         Int     @id @default(autoincrement())
  user_id    Int
  administrative_id Int
  status     String
  date       DateTime
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  administrative administrative @relation(fields: [administrative_id], references: [id])
  user       user     @relation(fields: [user_id], references: [id])
}